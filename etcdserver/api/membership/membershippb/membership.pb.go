// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: membership.proto

/*
	Package membershippb is a generated protocol buffer package.

	It is generated from these files:
		membership.proto

	It has these top-level messages:
		RaftAttributes
		MemberMonitor
		MemberPromoteRule
		Attributes
		Member
		ClusterVersionSetRequest
		ClusterMemberAttrSetRequest
		DowngradeInfoSetRequest
*/
package membershippb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MemberMonitor_Op int32

const (
	MemberMonitor_GREATER_EQUAL MemberMonitor_Op = 0
)

var MemberMonitor_Op_name = map[int32]string{
	0: "GREATER_EQUAL",
}
var MemberMonitor_Op_value = map[string]int32{
	"GREATER_EQUAL": 0,
}

func (x MemberMonitor_Op) String() string {
	return proto.EnumName(MemberMonitor_Op_name, int32(x))
}
func (MemberMonitor_Op) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMembership, []int{1, 0}
}

type MemberMonitor_Type int32

const (
	MemberMonitor_PROGRESS MemberMonitor_Type = 0
)

var MemberMonitor_Type_name = map[int32]string{
	0: "PROGRESS",
}
var MemberMonitor_Type_value = map[string]int32{
	"PROGRESS": 0,
}

func (x MemberMonitor_Type) String() string {
	return proto.EnumName(MemberMonitor_Type_name, int32(x))
}
func (MemberMonitor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorMembership, []int{1, 1}
}

// RaftAttributes represents the raft related attributes of an etcd member.
type RaftAttributes struct {
	// peerURLs is the list of peers in the raft cluster.
	PeerUrls []string `protobuf:"bytes,1,rep,name=peer_urls,json=peerUrls" json:"peer_urls,omitempty"`
	// isLearner indicates if the member is raft learner.
	IsLearner bool `protobuf:"varint,2,opt,name=is_learner,json=isLearner,proto3" json:"is_learner,omitempty"`
}

func (m *RaftAttributes) Reset()                    { *m = RaftAttributes{} }
func (m *RaftAttributes) String() string            { return proto.CompactTextString(m) }
func (*RaftAttributes) ProtoMessage()               {}
func (*RaftAttributes) Descriptor() ([]byte, []int) { return fileDescriptorMembership, []int{0} }

type MemberMonitor struct {
	Type      MemberMonitor_Type `protobuf:"varint,1,opt,name=type,proto3,enum=membershippb.MemberMonitor_Type" json:"type,omitempty"`
	Op        MemberMonitor_Op   `protobuf:"varint,2,opt,name=op,proto3,enum=membershippb.MemberMonitor_Op" json:"op,omitempty"`
	Threshold uint64             `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Delay     uint32             `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (m *MemberMonitor) Reset()                    { *m = MemberMonitor{} }
func (m *MemberMonitor) String() string            { return proto.CompactTextString(m) }
func (*MemberMonitor) ProtoMessage()               {}
func (*MemberMonitor) Descriptor() ([]byte, []int) { return fileDescriptorMembership, []int{1} }

type MemberPromoteRule struct {
	Auto     bool             `protobuf:"varint,1,opt,name=auto,proto3" json:"auto,omitempty"`
	Monitors []*MemberMonitor `protobuf:"bytes,2,rep,name=monitors" json:"monitors,omitempty"`
}

func (m *MemberPromoteRule) Reset()                    { *m = MemberPromoteRule{} }
func (m *MemberPromoteRule) String() string            { return proto.CompactTextString(m) }
func (*MemberPromoteRule) ProtoMessage()               {}
func (*MemberPromoteRule) Descriptor() ([]byte, []int) { return fileDescriptorMembership, []int{2} }

// Attributes represents all the non-raft related attributes of an etcd member.
type Attributes struct {
	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClientUrls []string `protobuf:"bytes,2,rep,name=client_urls,json=clientUrls" json:"client_urls,omitempty"`
}

func (m *Attributes) Reset()                    { *m = Attributes{} }
func (m *Attributes) String() string            { return proto.CompactTextString(m) }
func (*Attributes) ProtoMessage()               {}
func (*Attributes) Descriptor() ([]byte, []int) { return fileDescriptorMembership, []int{3} }

type Member struct {
	ID               uint64               `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	RaftAttributes   *RaftAttributes      `protobuf:"bytes,2,opt,name=raft_attributes,json=raftAttributes" json:"raft_attributes,omitempty"`
	MemberAttributes *Attributes          `protobuf:"bytes,3,opt,name=member_attributes,json=memberAttributes" json:"member_attributes,omitempty"`
	PromoteRules     []*MemberPromoteRule `protobuf:"bytes,4,rep,name=promote_rules,json=promoteRules" json:"promote_rules,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptorMembership, []int{4} }

type ClusterVersionSetRequest struct {
	Ver string `protobuf:"bytes,1,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *ClusterVersionSetRequest) Reset()         { *m = ClusterVersionSetRequest{} }
func (m *ClusterVersionSetRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterVersionSetRequest) ProtoMessage()    {}
func (*ClusterVersionSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMembership, []int{5}
}

type ClusterMemberAttrSetRequest struct {
	Member_ID        uint64      `protobuf:"varint,1,opt,name=member_ID,json=memberID,proto3" json:"member_ID,omitempty"`
	MemberAttributes *Attributes `protobuf:"bytes,2,opt,name=member_attributes,json=memberAttributes" json:"member_attributes,omitempty"`
}

func (m *ClusterMemberAttrSetRequest) Reset()         { *m = ClusterMemberAttrSetRequest{} }
func (m *ClusterMemberAttrSetRequest) String() string { return proto.CompactTextString(m) }
func (*ClusterMemberAttrSetRequest) ProtoMessage()    {}
func (*ClusterMemberAttrSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMembership, []int{6}
}

type DowngradeInfoSetRequest struct {
	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Ver     string `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *DowngradeInfoSetRequest) Reset()         { *m = DowngradeInfoSetRequest{} }
func (m *DowngradeInfoSetRequest) String() string { return proto.CompactTextString(m) }
func (*DowngradeInfoSetRequest) ProtoMessage()    {}
func (*DowngradeInfoSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorMembership, []int{7}
}

func init() {
	proto.RegisterType((*RaftAttributes)(nil), "membershippb.RaftAttributes")
	proto.RegisterType((*MemberMonitor)(nil), "membershippb.MemberMonitor")
	proto.RegisterType((*MemberPromoteRule)(nil), "membershippb.MemberPromoteRule")
	proto.RegisterType((*Attributes)(nil), "membershippb.Attributes")
	proto.RegisterType((*Member)(nil), "membershippb.Member")
	proto.RegisterType((*ClusterVersionSetRequest)(nil), "membershippb.ClusterVersionSetRequest")
	proto.RegisterType((*ClusterMemberAttrSetRequest)(nil), "membershippb.ClusterMemberAttrSetRequest")
	proto.RegisterType((*DowngradeInfoSetRequest)(nil), "membershippb.DowngradeInfoSetRequest")
	proto.RegisterEnum("membershippb.MemberMonitor_Op", MemberMonitor_Op_name, MemberMonitor_Op_value)
	proto.RegisterEnum("membershippb.MemberMonitor_Type", MemberMonitor_Type_name, MemberMonitor_Type_value)
}
func (m *RaftAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsLearner {
		dAtA[i] = 0x10
		i++
		if m.IsLearner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *MemberMonitor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberMonitor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.Type))
	}
	if m.Op != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.Op))
	}
	if m.Threshold != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.Threshold))
	}
	if m.Delay != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.Delay))
	}
	return i, nil
}

func (m *MemberPromoteRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MemberPromoteRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Auto {
		dAtA[i] = 0x8
		i++
		if m.Auto {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Monitors) > 0 {
		for _, msg := range m.Monitors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMembership(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Attributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Member) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.ID))
	}
	if m.RaftAttributes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.RaftAttributes.Size()))
		n1, err := m.RaftAttributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MemberAttributes != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.MemberAttributes.Size()))
		n2, err := m.MemberAttributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.PromoteRules) > 0 {
		for _, msg := range m.PromoteRules {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMembership(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ClusterVersionSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterVersionSetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ver) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Ver)))
		i += copy(dAtA[i:], m.Ver)
	}
	return i, nil
}

func (m *ClusterMemberAttrSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClusterMemberAttrSetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Member_ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.Member_ID))
	}
	if m.MemberAttributes != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMembership(dAtA, i, uint64(m.MemberAttributes.Size()))
		n3, err := m.MemberAttributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DowngradeInfoSetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DowngradeInfoSetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ver) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMembership(dAtA, i, uint64(len(m.Ver)))
		i += copy(dAtA[i:], m.Ver)
	}
	return i, nil
}

func encodeVarintMembership(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftAttributes) Size() (n int) {
	var l int
	_ = l
	if len(m.PeerUrls) > 0 {
		for _, s := range m.PeerUrls {
			l = len(s)
			n += 1 + l + sovMembership(uint64(l))
		}
	}
	if m.IsLearner {
		n += 2
	}
	return n
}

func (m *MemberMonitor) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMembership(uint64(m.Type))
	}
	if m.Op != 0 {
		n += 1 + sovMembership(uint64(m.Op))
	}
	if m.Threshold != 0 {
		n += 1 + sovMembership(uint64(m.Threshold))
	}
	if m.Delay != 0 {
		n += 1 + sovMembership(uint64(m.Delay))
	}
	return n
}

func (m *MemberPromoteRule) Size() (n int) {
	var l int
	_ = l
	if m.Auto {
		n += 2
	}
	if len(m.Monitors) > 0 {
		for _, e := range m.Monitors {
			l = e.Size()
			n += 1 + l + sovMembership(uint64(l))
		}
	}
	return n
}

func (m *Attributes) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	if len(m.ClientUrls) > 0 {
		for _, s := range m.ClientUrls {
			l = len(s)
			n += 1 + l + sovMembership(uint64(l))
		}
	}
	return n
}

func (m *Member) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMembership(uint64(m.ID))
	}
	if m.RaftAttributes != nil {
		l = m.RaftAttributes.Size()
		n += 1 + l + sovMembership(uint64(l))
	}
	if m.MemberAttributes != nil {
		l = m.MemberAttributes.Size()
		n += 1 + l + sovMembership(uint64(l))
	}
	if len(m.PromoteRules) > 0 {
		for _, e := range m.PromoteRules {
			l = e.Size()
			n += 1 + l + sovMembership(uint64(l))
		}
	}
	return n
}

func (m *ClusterVersionSetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	return n
}

func (m *ClusterMemberAttrSetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Member_ID != 0 {
		n += 1 + sovMembership(uint64(m.Member_ID))
	}
	if m.MemberAttributes != nil {
		l = m.MemberAttributes.Size()
		n += 1 + l + sovMembership(uint64(l))
	}
	return n
}

func (m *DowngradeInfoSetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Ver)
	if l > 0 {
		n += 1 + l + sovMembership(uint64(l))
	}
	return n
}

func sovMembership(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMembership(x uint64) (n int) {
	return sovMembership(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerUrls = append(m.PeerUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLearner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLearner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberMonitor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberMonitor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberMonitor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MemberMonitor_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (MemberMonitor_Op(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delay", wireType)
			}
			m.Delay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Delay |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MemberPromoteRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MemberPromoteRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MemberPromoteRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auto", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Auto = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Monitors = append(m.Monitors, &MemberMonitor{})
			if err := m.Monitors[len(m.Monitors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientUrls = append(m.ClientUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftAttributes == nil {
				m.RaftAttributes = &RaftAttributes{}
			}
			if err := m.RaftAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberAttributes == nil {
				m.MemberAttributes = &Attributes{}
			}
			if err := m.MemberAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoteRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PromoteRules = append(m.PromoteRules, &MemberPromoteRule{})
			if err := m.PromoteRules[len(m.PromoteRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterVersionSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterVersionSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterVersionSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClusterMemberAttrSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClusterMemberAttrSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClusterMemberAttrSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member_ID", wireType)
			}
			m.Member_ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Member_ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemberAttributes == nil {
				m.MemberAttributes = &Attributes{}
			}
			if err := m.MemberAttributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DowngradeInfoSetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DowngradeInfoSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DowngradeInfoSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMembership
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMembership(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMembership
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMembership(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMembership
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMembership
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMembership
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMembership
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMembership(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMembership = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMembership   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("membership.proto", fileDescriptorMembership) }

var fileDescriptorMembership = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x4c,
	0x10, 0xcd, 0x3a, 0xfe, 0xfa, 0xd9, 0xd3, 0x26, 0xa4, 0xab, 0x48, 0xb5, 0x48, 0x71, 0x2d, 0x9f,
	0x7c, 0x40, 0x41, 0x0a, 0x48, 0x9c, 0x03, 0xb1, 0xaa, 0x4a, 0xad, 0x5a, 0xb6, 0x2d, 0xd7, 0xe0,
	0x90, 0x69, 0x6b, 0xc9, 0xf1, 0x2e, 0xbb, 0x6b, 0x50, 0x8f, 0xfc, 0x0b, 0x7e, 0x52, 0x8f, 0x1c,
	0x39, 0x42, 0xb8, 0xf2, 0x23, 0x50, 0x76, 0xd3, 0xc4, 0x91, 0xaa, 0x4a, 0xdc, 0x66, 0xc7, 0x6f,
	0xde, 0xcc, 0x7b, 0x33, 0x86, 0xce, 0x0c, 0x67, 0x13, 0x94, 0xea, 0x26, 0x17, 0x7d, 0x21, 0xb9,
	0xe6, 0x74, 0x67, 0x9d, 0x11, 0x93, 0xa7, 0xdd, 0x6b, 0x7e, 0xcd, 0xcd, 0x87, 0x17, 0x8b, 0xc8,
	0x62, 0xe2, 0x63, 0x68, 0xb3, 0xec, 0x4a, 0x0f, 0xb5, 0x96, 0xf9, 0xa4, 0xd2, 0xa8, 0x68, 0x0f,
	0x7c, 0x81, 0x28, 0xc7, 0x95, 0x2c, 0x54, 0x40, 0xa2, 0x66, 0xe2, 0x33, 0x6f, 0x91, 0xb8, 0x94,
	0x85, 0xa2, 0xcf, 0x00, 0x72, 0x35, 0x2e, 0x30, 0x93, 0x25, 0xca, 0xc0, 0x89, 0x48, 0xe2, 0x31,
	0x3f, 0x57, 0xc7, 0x36, 0x11, 0xff, 0x20, 0xd0, 0x3a, 0x31, 0x4d, 0x4f, 0x78, 0x99, 0x6b, 0x2e,
	0xe9, 0x2b, 0x70, 0xf5, 0xad, 0xc0, 0x80, 0x44, 0x24, 0x69, 0x0f, 0xa2, 0x7e, 0x7d, 0xa4, 0xfe,
	0x06, 0xb4, 0x7f, 0x71, 0x2b, 0x90, 0x19, 0x34, 0xed, 0x83, 0xc3, 0x85, 0xa1, 0x6f, 0x0f, 0xc2,
	0xc7, 0x6a, 0x4e, 0x05, 0x73, 0xb8, 0xa0, 0xfb, 0xe0, 0xeb, 0x1b, 0x89, 0xea, 0x86, 0x17, 0xd3,
	0xa0, 0x19, 0x91, 0xc4, 0x65, 0xeb, 0x04, 0xed, 0xc2, 0x7f, 0x53, 0x2c, 0xb2, 0xdb, 0xc0, 0x8d,
	0x48, 0xd2, 0x62, 0xf6, 0x11, 0xef, 0x81, 0x73, 0x2a, 0xe8, 0x2e, 0xb4, 0x0e, 0x59, 0x3a, 0xbc,
	0x48, 0xd9, 0x38, 0x7d, 0x77, 0x39, 0x3c, 0xee, 0x34, 0xe2, 0x2e, 0xb8, 0x8b, 0x51, 0xe8, 0x0e,
	0x78, 0x67, 0xec, 0xf4, 0x90, 0xa5, 0xe7, 0xe7, 0x9d, 0x46, 0xfc, 0x01, 0x76, 0x6d, 0xeb, 0x33,
	0xc9, 0x67, 0x5c, 0x23, 0xab, 0x0a, 0xa4, 0x14, 0xdc, 0xac, 0xd2, 0xdc, 0xa8, 0xf3, 0x98, 0x89,
	0xe9, 0x6b, 0xf0, 0x66, 0x76, 0x3a, 0x15, 0x38, 0x51, 0x33, 0xd9, 0x1e, 0xf4, 0x1e, 0x51, 0xc0,
	0x56, 0xe0, 0x78, 0x08, 0x50, 0x5b, 0x03, 0x05, 0xb7, 0xcc, 0x66, 0xd6, 0x38, 0x9f, 0x99, 0x98,
	0x1e, 0xc0, 0xf6, 0xc7, 0x22, 0xc7, 0x52, 0xdb, 0xe5, 0x38, 0x66, 0x39, 0x60, 0x53, 0x8b, 0xf5,
	0xc4, 0x7f, 0x08, 0x6c, 0x59, 0x7a, 0xda, 0x06, 0xe7, 0x68, 0x64, 0xaa, 0x5d, 0xe6, 0x1c, 0x8d,
	0x68, 0x0a, 0x4f, 0x64, 0x76, 0xa5, 0xc7, 0xd9, 0xaa, 0x85, 0xf1, 0x77, 0x7b, 0xb0, 0xbf, 0x39,
	0xdd, 0xe6, 0x35, 0xb0, 0xb6, 0xdc, 0xbc, 0x8e, 0x14, 0x76, 0x2d, 0xbc, 0x4e, 0xd4, 0x34, 0x44,
	0xc1, 0x26, 0x51, 0x8d, 0x64, 0x79, 0x9a, 0x35, 0x9a, 0x11, 0xb4, 0x84, 0xf5, 0x71, 0x2c, 0xab,
	0x02, 0x55, 0xe0, 0x1a, 0xa7, 0x0e, 0x1e, 0x72, 0xaa, 0x66, 0x38, 0xdb, 0x11, 0xeb, 0x87, 0x8a,
	0x9f, 0x43, 0xf0, 0xb6, 0xa8, 0x94, 0x46, 0xf9, 0x1e, 0xa5, 0xca, 0x79, 0x79, 0x8e, 0x9a, 0xe1,
	0xa7, 0x0a, 0x95, 0xa6, 0x1d, 0x68, 0x7e, 0x46, 0xb9, 0xb4, 0x6f, 0x11, 0xc6, 0x5f, 0x09, 0xf4,
	0x96, 0xf0, 0x93, 0xd5, 0x3c, 0xb5, 0x8a, 0x1e, 0xf8, 0x4b, 0x69, 0x2b, 0xe3, 0x3c, 0x9b, 0x30,
	0xf6, 0x3d, 0xa0, 0xdb, 0xf9, 0x57, 0xdd, 0x71, 0x0a, 0x7b, 0x23, 0xfe, 0xa5, 0xbc, 0x96, 0xd9,
	0x14, 0x8f, 0xca, 0x2b, 0x5e, 0x6b, 0x1f, 0xc0, 0xff, 0x58, 0x66, 0x93, 0x02, 0xa7, 0xcb, 0x73,
	0xba, 0x7f, 0xde, 0x4b, 0x71, 0x56, 0x52, 0xde, 0x74, 0xef, 0x7e, 0x85, 0x8d, 0xbb, 0x79, 0x48,
	0xbe, 0xcf, 0x43, 0xf2, 0x73, 0x1e, 0x92, 0x6f, 0xbf, 0xc3, 0xc6, 0x64, 0xcb, 0xfc, 0xd2, 0x2f,
	0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x93, 0xfa, 0x31, 0x0a, 0x04, 0x00, 0x00,
}
